#!/bin/sh -x

# 24 hourly
# 30 daily
# 52 weeks
# 5 years

#-- begin of user configuration
BACKUP_SERVER=beedle.local
BACKUP_USER=amcoder
USER=$(whoami)
SOURCEDIR=/home/$USER/
TARGETDIR=/volume1/backup/$(hostname)/$USER
#-- end of user configuration

INTERVAL=$1
NUM=$2

TIMESTAMP=`date "+%Y-%m-%dT%H-%M-%S"`

TEMPFILE=$TARGETDIR/$INTERVAL-tmp-$TIMESTAMP

# Create new backup using rsync and output to log
rsync -avzPh --delete --delete-excluded -e ssh \
  --exclude-from=/home/$USER/.config/backup_exclude \
  --link-dest=$TARGETDIR/latest \
  $SOURCEDIR \
  $BACKUP_USER@$BACKUP_SERVER:$TEMPFILE

# check exit status to see if backup failed
if [ "$?" = 0 ]; then
  # Rotate backups
  ssh $BACKUP_USER@$BACKUP_SERVER "[ -d $TARGETDIR/$INTERVAL.$(($NUM-1)) ] && rm -rf $TARGETDIR/$INTERVAL.$(($NUM-1))"
  for i in `seq $(($NUM-1)) -1 1`
  do
    ssh $BACKUP_USER@$BACKUP_SERVER "[ -d $TARGETDIR/$INTERVAL.$(($i-1)) ] && mv $TARGETDIR/$INTERVAL.$(($i-1)) $TARGETDIR/$INTERVAL.$i"
  done

  # Rename directory if succeeded
  ssh $BACKUP_USER@$BACKUP_SERVER "mv $TEMPFILE $TARGETDIR/$INTERVAL.0"
  ssh $BACKUP_USER@$BACKUP_SERVER "touch $TARGETDIR/$INTERVAL.0"

  # Remove link to latest backup
  ssh $BACKUP_USER@$BACKUP_SERVER "rm -f $TARGETDIR/latest"

  # Create link to the newest backup
  ssh $BACKUP_USER@$BACKUP_SERVER "ln -s $TARGETDIR/$INTERVAL.0 $TARGETDIR/latest"
else
  # Rename directory if failed
  printf "rsync failed\n"
  ssh $BACKUP_USER@$BACKUP_SERVER "mv $TEMPFILE $TARGETDIR/$INTERVAL-failed-$TIMESTAMP"
  exit 1
fi
